// -------------------------------------------------------------
// 
// File Name: F:\verilogTest\2nd\hdlsrc\NonCIC_Final\Non_recursive_CIC1_tc.v
// Created: 2022-03-05 12:50:35
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Non_recursive_CIC1_tc
// Source Path: Non-recursive CIC1_tc
// Hierarchy Level: 1
// 
// Master clock enable input: clk_enable
// 
// enb         : identical to clk_enable
// enb_1_12_0  : 12x slower than clk with last phase
// enb_1_24_0  : 24x slower than clk with last phase
// enb_1_24_1  : 24x slower than clk with phase 1
// enb_1_48_0  : 48x slower than clk with last phase
// enb_1_48_1  : 48x slower than clk with phase 1
// enb_1_144_1 : 144x slower than clk with phase 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Non_recursive_CIC1_tc
          (clk,
           reset_x,
           clk_enable,
           enb,
           enb_1_12_0,
           enb_1_24_0,
           enb_1_24_1,
           enb_1_48_0,
           enb_1_48_1,
           enb_1_144_1);


  input   clk;
  input   reset_x;
  input   clk_enable;
  output  enb;
  output  enb_1_12_0;
  output  enb_1_24_0;
  output  enb_1_24_1;
  output  enb_1_48_0;
  output  enb_1_48_1;
  output  enb_1_144_1;


  reg [3:0] count12;  // ufix4
  reg  phase_0;
  wire phase_0_tmp;
  reg [4:0] count24;  // ufix5
  reg  phase_0_1;
  wire phase_0_tmp_1;
  reg  phase_1;
  wire phase_1_tmp;
  reg [5:0] count48;  // ufix6
  reg  phase_0_2;
  wire phase_0_tmp_2;
  reg  phase_1_1;
  wire phase_1_tmp_1;
  reg [7:0] count144;  // ufix8
  wire phase_all;
  reg  phase_1_2;
  wire phase_1_tmp_2;


  always @ (posedge clk)
    begin: Counter12
      if (reset_x == 1'b1) begin
        count12 <= 4'b0001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count12 >= 4'b1011) begin
            count12 <= 4'b0000;
          end
          else begin
            count12 <= count12 + 4'b0001;
          end
        end
      end
    end // Counter12

  always @ ( posedge clk)
    begin: temp_process1
      if (reset_x == 1'b1) begin
        phase_0 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_0 <= phase_0_tmp;
        end
      end
    end // temp_process1

  assign  phase_0_tmp = (count12 == 4'b1011 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk)
    begin: Counter24
      if (reset_x == 1'b1) begin
        count24 <= 5'b00001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count24 >= 5'b10111) begin
            count24 <= 5'b00000;
          end
          else begin
            count24 <= count24 + 5'b00001;
          end
        end
      end
    end // Counter24

  always @ ( posedge clk)
    begin: temp_process2
      if (reset_x == 1'b1) begin
        phase_0_1 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_0_1 <= phase_0_tmp_1;
        end
      end
    end // temp_process2

  assign  phase_0_tmp_1 = (count24 == 5'b10111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ ( posedge clk)
    begin: temp_process3
      if (reset_x == 1'b1) begin
        phase_1 <= 1'b1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_1 <= phase_1_tmp;
        end
      end
    end // temp_process3

  assign  phase_1_tmp = (count24 == 5'b00000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk)
    begin: Counter48
      if (reset_x == 1'b1) begin
        count48 <= 6'b000001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count48 >= 6'b101111) begin
            count48 <= 6'b000000;
          end
          else begin
            count48 <= count48 + 6'b000001;
          end
        end
      end
    end // Counter48

  always @ ( posedge clk)
    begin: temp_process4
      if (reset_x == 1'b1) begin
        phase_0_2 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_0_2 <= phase_0_tmp_2;
        end
      end
    end // temp_process4

  assign  phase_0_tmp_2 = (count48 == 6'b101111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ ( posedge clk)
    begin: temp_process5
      if (reset_x == 1'b1) begin
        phase_1_1 <= 1'b1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_1_1 <= phase_1_tmp_1;
        end
      end
    end // temp_process5

  assign  phase_1_tmp_1 = (count48 == 6'b000000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk)
    begin: Counter144
      if (reset_x == 1'b1) begin
        count144 <= 8'b00000001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count144 >= 8'b10001111) begin
            count144 <= 8'b00000000;
          end
          else begin
            count144 <= count144 + 8'b00000001;
          end
        end
      end
    end // Counter144

  assign phase_all = clk_enable ? 1'b1 : 1'b0;

  always @ ( posedge clk)
    begin: temp_process6
      if (reset_x == 1'b1) begin
        phase_1_2 <= 1'b1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_1_2 <= phase_1_tmp_2;
        end
      end
    end // temp_process6

  assign  phase_1_tmp_2 = (count144 == 8'b00000000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign enb =  phase_all & clk_enable;

  assign enb_1_12_0 =  phase_0 & clk_enable;

  assign enb_1_24_0 =  phase_0_1 & clk_enable;

  assign enb_1_24_1 =  phase_1 & clk_enable;

  assign enb_1_48_0 =  phase_0_2 & clk_enable;

  assign enb_1_48_1 =  phase_1_1 & clk_enable;

  assign enb_1_144_1 =  phase_1_2 & clk_enable;


endmodule  // Non_recursive_CIC1_tc

