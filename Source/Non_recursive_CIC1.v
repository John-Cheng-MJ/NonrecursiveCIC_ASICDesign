// -------------------------------------------------------------
// 
// File Name: F:\verilogTest\2nd\hdlsrc\NonCIC_Final\Non_recursive_CIC1.v
// Created: 2022-03-05 12:50:35
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 6.94444e-05
// Target subsystem base rate: 0.000833333
// Explicit user oversample request: 12x
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.01
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        0.01
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Non_recursive_CIC1
// Source Path: NonCIC_Final/Non-recursive CIC1
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Non_recursive_CIC1
          (clk,
           reset_x,
           clk_enable,
           In1,
           ce_out,
           Out1);


  input   clk;
  input   reset_x;
  input   clk_enable;
  input   signed [18:0] In1;  // sfix19_En14
  output  ce_out;
  output  signed [18:0] Out1;  // sfix19_En14


  wire enb_1_12_0;
  wire enb_1_24_1;
  wire enb_1_24_0;
  wire enb_1_48_1;
  wire enb_1_48_0;
  wire enb_1_144_1;
  wire enb;
  wire signed [31:0] First_Block_H2_z_out1;  // sfix32_En28
  reg signed [31:0] Downsample_bypass_reg;  // sfix32
  wire signed [31:0] Downsample_out1;  // sfix32_En28
  wire signed [48:0] First_Block_H2_z_1_out1;  // sfix49_En45
  reg signed [48:0] Downsample1_bypass_reg;  // sfix49
  wire signed [48:0] Downsample1_out1;  // sfix49_En45
  wire signed [18:0] Third_Block_H3_z_out1;  // sfix19_En14
  reg signed [18:0] Downsample2_bypass_reg;  // sfix19
  wire signed [18:0] Downsample2_out1;  // sfix19_En14


  Non_recursive_CIC1_tc Non_recursive_CIC1_tc_1 (.clk(clk),
                                                 .reset_x(reset_x),
                                                 .clk_enable(clk_enable),
                                                 .enb(enb),
                                                 .enb_1_12_0(enb_1_12_0),
                                                 .enb_1_24_0(enb_1_24_0),
                                                 .enb_1_24_1(enb_1_24_1),
                                                 .enb_1_48_0(enb_1_48_0),
                                                 .enb_1_48_1(enb_1_48_1),
                                                 .enb_1_144_1(enb_1_144_1)
                                                 );

  First_Block_H2_z First_Block_H2_z_2 (.clk(clk),
                                       .enb_1_12_0(enb_1_12_0),
                                       .In1(In1),  // sfix19_En14
                                       .Out1(First_Block_H2_z_out1)  // sfix32_En28
                                       );

  // Downsample: Downsample by 2, Sample offset 0 
  // Downsample bypass register
  always @(posedge clk)
    begin : Downsample_bypass_process
      if (enb_1_24_1) begin
        Downsample_bypass_reg <= First_Block_H2_z_out1;
      end
    end

  assign Downsample_out1 = (enb_1_24_1 == 1'b1 ? First_Block_H2_z_out1 :
              Downsample_bypass_reg);



  First_Block_H2_z_1 First_Block_H2_z_1_1 (.clk(clk),
                                           .enb_1_24_0(enb_1_24_0),
                                           .In1(Downsample_out1),  // sfix32_En28
                                           .Out1(First_Block_H2_z_1_out1)  // sfix49_En45
                                           );

  // Downsample1: Downsample by 2, Sample offset 0 
  // Downsample bypass register
  always @(posedge clk)
    begin : Downsample1_bypass_process
      if (enb_1_48_1) begin
        Downsample1_bypass_reg <= First_Block_H2_z_1_out1;
      end
    end

  assign Downsample1_out1 = (enb_1_48_1 == 1'b1 ? First_Block_H2_z_1_out1 :
              Downsample1_bypass_reg);



  Third_Block_H3_z Third_Block_H3_z_1 (.clk(clk),
                                       .enb_1_48_0(enb_1_48_0),
                                       .In1(Downsample1_out1),  // sfix49_En45
                                       .Out1(Third_Block_H3_z_out1)  // sfix19_En14
                                       );

  // Downsample2: Downsample by 3, Sample offset 0 
  // Downsample bypass register
  always @(posedge clk)
    begin : Downsample2_bypass_process
      if (enb_1_144_1) begin
        Downsample2_bypass_reg <= Third_Block_H3_z_out1;
      end
    end

  assign Downsample2_out1 = (enb_1_144_1 == 1'b1 ? Third_Block_H3_z_out1 :
              Downsample2_bypass_reg);



  assign Out1 = Downsample2_out1;

  assign ce_out = enb_1_144_1;

endmodule  // Non_recursive_CIC1

